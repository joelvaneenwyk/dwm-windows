# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: '3'

vars:
  BUILD_DIR_NAME: >-
    .build
  CMAKE_EXE_PATH: >-
    .build/x64/Release/dwm-windows/dwm-windows.exe

tasks:
  default:
    cmds:
      - task: zig-build
      - task: msbuild

  clang-format:
    aliases: [fmt, format]
    sources:
      - src/**/*.c
      - src/**/*.h
    cmds:
      - for: sources
        cmd: |
          clang-format -i "{{joinPath .TASKFILE_DIR .ITEM}}"

  tidy:
    sources:
      - src/**/*.c
      - src/**/*.h
    cmds:
      - for: sources
        task: clang-tidy
        vars: { CLANG_TIDY_SOURCE: "{{.ITEM}}" }

  clang-tidy:
    requires:
      vars: [CLANG_TIDY_SOURCE]
    vars:
      CLANG_TIDY_OUT_FILE: '.build/{{splitList "/" (toSlash .CLANG_TIDY_SOURCE) | last}}.out'
    sources:
      - '{{.CLANG_TIDY_SOURCE}}'
    generates:
      - '{{.CLANG_TIDY_OUT_FILE}}'
    cmds:
      - cmd: mkdir "{{joinPath .TASKFILE_DIR ".build"}}"
        silent: true
        ignore_error: true
      - cmd: |
          clang-tidy "{{joinPath .TASKFILE_DIR .CLANG_TIDY_SOURCE}}" \
            --config-file="{{joinPath .TASKFILE_DIR ".clang-tidy"}}" \
            --use-color \
            --fix \
            --fix-notes \
            --fix-errors \
          > "{{joinPath .TASKFILE_DIR .CLANG_TIDY_OUT_FILE | fromSlash}}"

  cmake-build:
    deps: [git-submodule-init]
    sources:
      - CMakeLists.txt
      - source/**/*.cpp
      - source/**/*.h
      - libs/CMakeLists.txt
      - libs/**/*.cpp
      - libs/**/*.h
    generates:
      - '{{.CMAKE_EXE_PATH}}'
    vars:
      CM_BUILD_CMAKE_PRESET: '{{ .CMAKE_PRESET | default "x64-windows" }}'
    cmds:
      - cmd: |
          cmake \
            -S "{{.TASKFILE_DIR}}" \
            -B "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}" \
            -G "Visual Studio 17 2022"
      - cmd: |
          cmake --build \
            "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}"

  cmake-install:
    deps: [cmake-build]
    cmds:
      - cmd: |
          cmake --install \
            "{{joinPath .TASKFILE_DIR .BUILD_DIR_NAME}}" --prefix "{{joinPath .TASKFILE_DIR "bin"}}"

  run:
    deps: [cmake-install]
    cmds:
      - cmd: >-
          cmd.exe /D /E:ON /C \
            start "dwm-windows" /D "{{joinPath .TASKFILE_DIR "bin"}}" "{{joinPath .TASKFILE_DIR .CMAKE_EXE_PATH}}"

  msbuild:
    aliases: [build, b]
    silent: true
    cmds:
      - cmd: echo "Building '{{ .MSBUILD_SOLUTION }}' with '{{ .MSBUILD_CONFIG }}' configuration."
      - cmd: >-
          "{{fromSlash .MSBUILD}}"
          /m
          /t:Build
          /p:Configuration="{{.MSBUILD_CONFIG}}"
          /p:Platform="{{.MSBUILD_PLATFORM}}"
          "{{fromSlash .MSBUILD_SOLUTION}}"
    vars:
      SOLUTIONS: |
        dwm-windows.sln
      DEFAULT_CONFIG: Release
      DEFAULT_PLATFORM: x64
      DEFAULT_SOLUTION: '{{index (splitLines .SOLUTIONS) 0}}'
      MSBUILD:
        sh: | # shell
          strings=("Preview" "Enterprise" "Professional" "Community")
          for str in "${strings[@]}"
          do
            result="C:/Program Files/Microsoft Visual Studio/2022/${str}/MSBuild/Current/Bin/amd64/MSBuild.exe"
            if [ -e "$result" ]; then
              echo "$result"
              break
            fi
          done
      MSBUILD_CONFIG: '{{ .CONFIG | default .DEFAULT_CONFIG }}'
      MSBUILD_SOLUTION: '{{ joinPath .TASKFILE_DIR (.SOLUTION | default .DEFAULT_SOLUTION) }}'
      MSBUILD_PLATFORM: '{{ .PLATFORM | default .DEFAULT_PLATFORM }}'

  git-submodule-init:
    sources:
      - .gitmodules
    cmds:
      - cmd: |
          if [ -f "{{joinPath .TASKFILE_DIR ".gitmodules"}}" ]; then
            git -C "{{.TASKFILE_DIR}}" submodule update --init --recursive
          fi

  zig:
    status:
      - zig version
    cmds:
      - cmd: scoop install zig
        platforms: [windows]

  zig-build:
    deps: [zig]
    cmds:
      - cmd: |
          zig cc \
            -o "{{ joinPath .TASKFILE_DIR "bin" "dwm-win32.exe" }}" \
              -target x86_64-windows-msvc \
              -std=c99 \
              -pedantic \
              -Wall \
              -Wno-error \
              -O2 \
              -s \
              -Wno-deprecated-declarations \
              -Wno-empty-body \
              -Wno-int-to-pointer-cast \
              -Wno-strict-prototypes \
              -Wno-misleading-indentation \
              -Wno-pointer-to-int-cast \
              -Wno-language-extension-token \
              -Wno-incompatible-pointer-types \
              -Wno-format \
              -DPROJECT_NAME="dwm-win32" \
              -DPROJECT_VER="0.1.2" \
              -DPROJECT_VER_MAJOR=0 \
              -DPROJECT_VER_MINOR=1 \
              -DPROJECT_VER_PATCH=2 \
              -DNDEBUG \
            -Isrc \
              src/dwm-win32.c \
              src/bstack.c \
              src/win32_utf8.c \
              src/fibonacci.c \
              src/gaplessgrid.c \
              src/grid.c \
              src/mods/client.c src/mods/display.c src/mods/dwm.c src/mods/eventemitter.c src/mods/hotkey.c \
            -Iextern/luabitop \
              extern/luabitop/bit.c \
            -Iextern/lua/src \
              extern/lua/src/lapi.c extern/lua/src/lauxlib.c extern/lua/src/lbaselib.c \
              extern/lua/src/lcode.c extern/lua/src/ldblib.c extern/lua/src/ldebug.c \
              extern/lua/src/ldo.c extern/lua/src/ldump.c extern/lua/src/lfunc.c \
              extern/lua/src/lgc.c extern/lua/src/linit.c extern/lua/src/liolib.c \
              extern/lua/src/llex.c extern/lua/src/lmathlib.c extern/lua/src/lmem.c \
              extern/lua/src/loadlib.c extern/lua/src/lobject.c extern/lua/src/lopcodes.c \
              extern/lua/src/loslib.c extern/lua/src/lparser.c extern/lua/src/lstate.c \
              extern/lua/src/lstring.c extern/lua/src/lstrlib.c extern/lua/src/ltable.c \
              extern/lua/src/ltablib.c extern/lua/src/ltm.c extern/lua/src/lundump.c \
              extern/lua/src/lvm.c extern/lua/src/lzio.c \
            -Iextern/lua-compat-5.3 \
              extern/lua-compat-5.3/compat-5.3.c \
